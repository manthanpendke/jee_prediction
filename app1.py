# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11WAtNOEWYUwGs-78JuDjvS3bsm9luJpo
"""

import streamlit as st
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.neighbors import KNeighborsClassifier

# Load dataset and models
def load_data_and_models():
    # Load dataset (replace with actual file path)
    data = pd.read_csv("2022.csv")

    # Encode categorical features
    label_encoders = {
        "Seat Type": LabelEncoder(),
        "Institute": LabelEncoder(),
        "Academic Program Name": LabelEncoder(),
        "Round": LabelEncoder(),
    }
    for col, encoder in label_encoders.items():
        data[col] = encoder.fit_transform(data[col])

    # Extract features and targets
    X = data[["Seat Type", "Opening Rank", "Closing Rank"]]
    y_institute = data["Institute"]
    y_program = data["Academic Program Name"]
    y_round = data["Round"]

    # Initialize scaler and KNN model
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    knn_institute = KNeighborsClassifier(n_neighbors=5)
    knn_program = KNeighborsClassifier(n_neighbors=5)
    knn_round = KNeighborsClassifier(n_neighbors=5)

    # Train models
    knn_institute.fit(X_scaled, y_institute)
    knn_program.fit(X_scaled, y_program)
    knn_round.fit(X_scaled, y_round)

    return (
        label_encoders,
        scaler,
        knn_institute,
        knn_program,
        knn_round,
        data,
    )

# Load data and models
label_encoders, scaler, knn_institute, knn_program, knn_round, data = load_data_and_models()

# Streamlit UI
st.title("ML Model Deployment App")
st.write("Predict the Institute, Academic Program, and Round based on your input data.")

# User inputs
seat_type = st.selectbox("Seat Type", label_encoders["Seat Type"].classes_)
rank = st.number_input("Rank", min_value=0, step=1)

# Predict button
if st.button("Predict"):
    # Encode inputs
    encoded_seat_type = label_encoders["Seat Type"].transform([seat_type])[0]

    # Prepare input for prediction
    input_data = np.array([[encoded_seat_type, rank, rank]])  # Opening and Closing ranks are the same
    scaled_input = scaler.transform(input_data)

    # Predictions
    institute_pred = knn_institute.predict(scaled_input)
    program_pred = knn_program.predict(scaled_input)
    round_pred = knn_round.predict(scaled_input)

    # Decode predictions
    institute_name = label_encoders["Institute"].inverse_transform(institute_pred)[0]
    program_name = label_encoders["Academic Program Name"].inverse_transform(program_pred)[0]
    round_name = label_encoders["Round"].inverse_transform(round_pred)[0]

    # Display predictions
    st.subheader("Predictions:")
    st.write(f"Predicted Institute: {institute_name}")
    st.write(f"Predicted Academic Program: {program_name}")
    st.write(f"Predicted Round: {round_name}")